{"version":3,"sources":["Components/Editor/Editor.jsx","App.js","serviceWorker.js","index.js"],"names":["Editor","state","html","css","generated_css","selected_css","sample_count","showing_settings","showing_full_preview","showing_generated_css","showing_css_options","showing_options_warning","showing_connection_problem","waiting_for_api","editor_settings","col_size","height","font_size","theme","themes","selected_theme","generate_test_html","setState","update_css_count","toggle_settings","toggle_full_preview","toggle_warning_message","toggle_css_options","current_css","change_editor_width","sign","current_col_size","change_editor_height","current_height","width","change_editor_theme","direction","current_editor_settings","current_theme_index","length","change_editor_font","current_font_size","select_css","class_name","split","current_selected_css","new_css","elements","axios","method","url","data","then","res","catch","this","get_html_elements","elements_arr","console","log","hasOwnProperty","post","element","element_class","css_arr","results","push","ms","Promise","resolve","setTimeout","test_css","i","wait","slice","preview","encodeURI","current_theme","css_cards","map","Card","bg","includes","onClick","Title","Body","replace","attr","Text","settings","Toast","className","show","onClose","Header","ButtonGroup","Button","preview_box","style","variant","size","src","title","editor","Fragment","value","mode","onChange","val","name","showLineNumbers","fontSize","editorProps","$blockScrolling","generate_css","window","scrollTo","toolbar","Dropdown","Toggle","Menu","Item","fluid","ToastHeader","color","ToastBody","generate_test_css","type","Minutes","Seconds","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cdab51de.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport AceEditor from 'react-ace';\r\nimport \"ace-builds/src-noconflict/mode-html\";\r\nimport \"ace-builds/src-noconflict/mode-css\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport './Editor.css';\r\nimport axios from 'axios'\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Card from \"react-bootstrap/Card\"\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'brace/theme/github';\r\nimport 'brace/theme/xcode';\r\nimport 'brace/theme/crimson_editor';\r\nimport 'brace/theme/tomorrow_night';\r\nimport 'brace/theme/solarized_dark';\r\nimport 'brace/theme/chaos';\r\nimport { ToastHeader, ToastBody } from \"react-bootstrap\";\r\nimport Loader from 'react-loader-spinner';\r\nimport Timer from 'react-compound-timer';\r\nimport { MDBContainer, MDBCol, MDBRow, MDBCard, MDBCardBody, MDBCardTitle } from \"mdbreact\";\r\n\r\n\r\nclass Editor extends Component {\r\n    state = {\r\n        html: \"\",\r\n        css: \"\",\r\n        generated_css: [],\r\n        selected_css: {},\r\n        sample_count: 1,\r\n        showing_settings: false,\r\n        showing_full_preview: false,\r\n        showing_generated_css: false,\r\n        showing_css_options: false,\r\n        showing_options_warning: false,\r\n        showing_connection_problem: false,\r\n        waiting_for_api: false,\r\n        editor_settings: {\r\n            col_size: 6,\r\n            height: 40,\r\n            font_size: 12,\r\n            theme: {\r\n                themes: ['github',\r\n                    'tomorrow_night',\r\n                    'crimson_editor',\r\n                    'solarized_dark',\r\n                    'xcode',\r\n                    'chaos'],\r\n                selected_theme: 0\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    async get_html_elements(html) {\r\n        let elements = null;\r\n        await axios({\r\n            method: \"post\",\r\n            url: \"/get_html_elements/\",\r\n            data: { html }\r\n        })\r\n            .then((res) => {\r\n                elements = res.data.elements;\r\n                this.setState({ showing_connection_problem: false });\r\n            })\r\n            .catch(() => this.setState({ showing_connection_problem: true, waiting_for_api: false }));\r\n\r\n        return elements;\r\n    }\r\n\r\n    async generate_css() {\r\n        const elements_arr = await this.get_html_elements(this.state.html);\r\n        console.log(elements_arr);\r\n        const connection_problem = this.state.showing_connection_problem;\r\n        if (!connection_problem) {\r\n            const sample_count = this.state.sample_count;\r\n            let generated_css = this.state.generated_css;\r\n            if (generated_css.length > 0) {\r\n                generated_css = [];\r\n            }\r\n            for (let class_name in elements_arr) {\r\n                this.setState({ waiting_for_api: true });\r\n                if (elements_arr.hasOwnProperty(class_name)) {\r\n                    await axios.post(\"/generate_css/\", {\r\n                        element: elements_arr[class_name],\r\n                        element_class: class_name,\r\n                        sample_count: sample_count\r\n                    })\r\n                        .then(res => {\r\n                            const css_arr = res.data.results;\r\n                            generated_css.push(css_arr);\r\n                            this.setState({\r\n                                generated_css: generated_css,\r\n                                showing_css_options: true,\r\n                                waiting_for_api: false,\r\n                                showing_connection_problem: false\r\n                            })\r\n                        })\r\n                        .catch(() => this.setState({ showing_connection_problem: true, waiting_for_api: false }));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async wait(ms) {\r\n        return new Promise(resolve => {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }\r\n\r\n    async generate_test_css() {\r\n        const test_css = [[\".test-h1{\\n\" +\r\n            \"color: rgb(176,156,10);\\n\" +\r\n            \"font-size: 15px;\\n\" +\r\n            \"letter-spacing: 1px;\\n\" +\r\n            \"text-transform: uppercase;\\n\" +\r\n            \"margin-top: 20px;\\n\" +\r\n            \"}\",\r\n        \".test-h1{\\n\" +\r\n        \"font-size: 21px;\\n\" +\r\n        \"color: red;\\n\" +\r\n        \"text-align: center;\\n\" +\r\n        \"padding-top: 10px;\\n\" +\r\n        \"padding-bottom: 10px;\\n\" +\r\n        \"}\",\r\n        \".test-h1{\\n\" +\r\n        \"font:26px tahoma, Arial;\\n\" +\r\n        \"color:rgb(0,172,218);\\n\" +\r\n        \"font-weight:bold;\\n\" +\r\n        \"margin:0px;\\n\" +\r\n        \"padding:8px 0px 10px 0;\\n\" +\r\n        \"text-decoration:nonefont:26px tahoma, Arial;\\n\" +\r\n        \"background:nonefont:15px Myriad Pro, Arial, Helvetica, sans-serif;\\n\" +\r\n        \"border-bottom:1px dotted rgb(0,172,218);\\n\" +\r\n        \"border:none;\\n\" +\r\n        \"}\"\r\n        ],\r\n        [\".test-d1{\\n\" +\r\n            \"float:left;\\n\" +\r\n            \"width:971px;\\n\" +\r\n            \"background:url(../images/title_bg.gif) no-repeat 27px 18pxfloat:left;\\n\" +\r\n            \"font:18px/20px \\\"ZapfHumnst BT\\\", Arial, Helvetica, sans-serif;\\n\" +\r\n            \"color:rgb(48,113,3);\\n\" +\r\n            \"padding:22px 0 8px 45pxfloat:left;\\n\" +\r\n            \"text-align:right;\\n\" +\r\n            \"text-decoration:nonecolor:rgb(48,113,3);\\n\" +\r\n            \"}\",\r\n        \".test-d1{\\n\" +\r\n        \"position: relative;\\n\" +\r\n        \"min-height: 1px;\\n\" +\r\n        \"padding-right: 15px;\\n\" +\r\n        \"padding-left: 15px;\\n\" +\r\n        \"float: left;\\n\" +\r\n        \"width: 25%;\\n\" +\r\n        \"}\",\r\n        \".test-d1{\\n\" +\r\n        \"padding: 10px;\\n\" +\r\n        \"background-color: rgb(206,43,113);\\n\" +\r\n        \"border-top: 1px solid rgb(206,43,113);\\n\" +\r\n        \"border-bottom: 1px solid rgb(206,43,113);\\n\" +\r\n        \"}\"],\r\n        [\".test-p1{\\n\" +\r\n            \"width: 100%;\\n\" +\r\n            \"padding: .5em 1em;\\n\" +\r\n            \"float: left;\\n\" +\r\n            \"text-align: center;\\n\" +\r\n            \"color: Chartreuse;\\n\" +\r\n            \"font-size: 1.8em;\\n\" +\r\n            \"font-weight: 300;\\n\" +\r\n            \"line-height: 1.8em;\\n\" +\r\n            \"}\\n\",\r\n        \".test-p1{\\n\" +\r\n        \"border-left: 1px solid rgb(85,43,237);\\n\" +\r\n        \"margin-bottom: -1px;\\n\" +\r\n        \"padding-bottom: 1px;\\n\" +\r\n        \"font-size: 16px;\\n\" +\r\n        \"padding-top: 8px;\\n\" +\r\n        \"padding-right: 8px;\\n\" +\r\n        \"color: rgb(85,43,237);\\n\" +\r\n        \"}\",\r\n        \".test-p1{\\n\" +\r\n        \"background: blue;\\n\" +\r\n        \"margin: 0 0 0 43px;\\n\" +\r\n        \"padding: 0 12px;\\n\" +\r\n        \"font-size: 110%;\\n\" +\r\n        \"font-style: italic;\\n\" +\r\n        \"border: 1px solid Cornsilk;\\n\" +\r\n        \"min-height: 38px;\\n\" +\r\n        \"color: Cornsilk;\\n\" +\r\n        \"height: auto !important;\\n\" +\r\n        \"line-height: 100%;\\n\" +\r\n        \"margin-top: 10px;\\n\" +\r\n        \"display: block;\\n\" +\r\n        \"}\"\r\n        ]\r\n        ];\r\n        const sample_count = this.state.sample_count;\r\n        let generated_css = [];\r\n        for (let i in test_css) {\r\n            this.setState({ waiting_for_api: true });\r\n            await this.wait(5000 * sample_count);\r\n            generated_css.push(test_css[i].slice(0, sample_count));\r\n            this.setState({\r\n                waiting_for_api: false,\r\n                showing_css_options: true,\r\n                generated_css: generated_css\r\n            });\r\n        }\r\n    }\r\n\r\n    generate_test_html = () => {\r\n        const test_html = \"<h1 class='test-h1'>Test header 1</h1>\\n\" +\r\n            \"<div class='test-d1'>Test Div 1</div>\\n\" +\r\n            \"<p class='test-p1'>Test Paragraph 1</p>\\n\"\r\n            ;\r\n        this.setState({ html: test_html })\r\n    };\r\n\r\n    update_css_count = (sample_count) => this.setState({ sample_count });\r\n\r\n    toggle_settings = () => this.setState({ showing_settings: !this.state.showing_settings });\r\n\r\n    toggle_full_preview = () => this.setState({ showing_full_preview: !this.state.showing_full_preview });\r\n\r\n    toggle_warning_message = () => this.setState({ showing_options_warning: !this.state.showing_options_warning });\r\n\r\n    toggle_css_options = () => {\r\n        const showing_css_options = !this.state.showing_css_options;\r\n        const current_css = this.state.css;\r\n        let showing_options_warning = this.state.showing_options_warning;\r\n\r\n        if (showing_css_options === false) {\r\n            showing_options_warning = true;\r\n        }\r\n        if (current_css === \"\") {\r\n            showing_options_warning = false;\r\n        }\r\n        this.setState({ showing_css_options: showing_css_options, showing_options_warning: showing_options_warning });\r\n    };\r\n\r\n\r\n    change_editor_width = (sign) => {\r\n        const editor_settings = this.state.editor_settings;\r\n        const current_col_size = editor_settings.col_size;\r\n        if (sign === \"+\" && current_col_size < 12) {\r\n            editor_settings.col_size = current_col_size + 1;\r\n        } else if (sign === \"-\" && current_col_size > 1) {\r\n            editor_settings.col_size = current_col_size - 1;\r\n        }\r\n        if (editor_settings.col_size !== current_col_size) {\r\n            this.setState({ editor_settings: editor_settings })\r\n        }\r\n    };\r\n\r\n    change_editor_height = (sign) => {\r\n        const editor_settings = this.state.editor_settings;\r\n        const current_height = editor_settings.height;\r\n        if (sign === \"+\") {\r\n            editor_settings.height = current_height + 2.5;\r\n        } else if (sign === \"-\" && current_height > 2.5) {\r\n            editor_settings.height = current_height - 2.5;\r\n        }\r\n        if (editor_settings.width !== current_height) {\r\n            this.setState({ editor_settings: editor_settings })\r\n        }\r\n    };\r\n\r\n    change_editor_theme = (direction) => {\r\n        const current_editor_settings = this.state.editor_settings;\r\n        const current_theme_index = current_editor_settings.theme.selected_theme;\r\n        if (direction === \"<\" && current_theme_index > 0) {\r\n            current_editor_settings.theme.selected_theme = current_theme_index - 1;\r\n        } else if (direction === \">\" && current_theme_index < (current_editor_settings.theme.themes.length - 1)) {\r\n            current_editor_settings.theme.selected_theme = current_theme_index + 1;\r\n        }\r\n        if (current_theme_index !== current_editor_settings.theme.selected_theme) {\r\n            this.setState({ editor_settings: current_editor_settings })\r\n        }\r\n    };\r\n\r\n    change_editor_font = (sign) => {\r\n        const editor_settings = this.state.editor_settings;\r\n        const current_font_size = editor_settings.font_size;\r\n        if (sign === \"+\") {\r\n            editor_settings.font_size = current_font_size + 1;\r\n        } else if (sign === \"-\" && current_font_size > 1) {\r\n            editor_settings.font_size = current_font_size - 1;\r\n        }\r\n        if (editor_settings.font_size !== current_font_size) {\r\n            this.setState({ editor_settings: editor_settings })\r\n        }\r\n    };\r\n\r\n    select_css = (css) => {\r\n        const class_name = css.split(\"{\")[0];\r\n        const current_selected_css = this.state.selected_css;\r\n        const current_css = this.state.css;\r\n        let showing_options_warning = this.state.showing_options_warning;\r\n        let new_css = \"\";\r\n        if (current_selected_css[class_name] === css) {\r\n            delete current_selected_css[class_name];\r\n        } else {\r\n            current_selected_css[class_name] = css;\r\n        }\r\n        for (css in current_selected_css) {\r\n            new_css += current_selected_css[css] + \"\\n\";\r\n        }\r\n        if (showing_options_warning && current_css === \"\") {\r\n            showing_options_warning = !showing_options_warning;\r\n        }\r\n        this.setState({ selected_css: current_selected_css, css: new_css, showing_options_warning: showing_options_warning })\r\n    };\r\n\r\n    render() {\r\n        const { html, css, sample_count, showing_settings,\r\n            editor_settings, showing_full_preview,\r\n            generated_css, showing_css_options, showing_options_warning,\r\n            showing_connection_problem, waiting_for_api } = this.state;\r\n        const preview = \"data:text/html;charset=utf-8,\" + encodeURI(\"<style>\" + css + \"</style>\" + html);\r\n        const current_theme = editor_settings.theme.themes[editor_settings.theme.selected_theme];\r\n\r\n        const css_cards = generated_css.map(css_arr =>\r\n            <MDBRow>\r\n                {\r\n                    css_arr.map(css =>\r\n                        <MDBCol>\r\n                            <Card\r\n                                bg={this.state.css.includes(css) ? \"success\" : \"\"}\r\n                                onClick={() => this.select_css(css)}\r\n                            >\r\n                                <Card.Title>{css.split(\"{\")[0]}</Card.Title>\r\n                                <Card.Body>\r\n                                    {css.split(\"{\")[1].replace(\"}\", \"\").split(\";\").map(attr => <Card.Text>{attr}</Card.Text>)}\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </MDBCol>\r\n                    )\r\n                }\r\n            </MDBRow>\r\n        );\r\n\r\n        const settings = <Toast className=\"settings-window\" show={showing_settings} onClose={this.toggle_settings}>\r\n            <Toast.Body>\r\n                <Toast.Header>\r\n                    Settings\r\n                </Toast.Header>\r\n                <Toast.Body>\r\n                    <p>Editor width <strong>({editor_settings.col_size}/12)</strong></p>\r\n                    <p>Editor height <strong>({editor_settings.height * 2} %)</strong></p>\r\n                    <p>Editor font size <strong>({editor_settings.font_size})</strong></p>\r\n                    <p>Selected theme: <strong>({current_theme})</strong></p>\r\n                </Toast.Body>\r\n                <Toast.Body><strong>Editor Width</strong>\r\n                    <ButtonGroup>\r\n                        <Button onClick={() => this.change_editor_width(\"-\")}><strong>-</strong></Button>\r\n                        <Button onClick={() => this.change_editor_width(\"+\")}><strong>+</strong></Button>\r\n                    </ButtonGroup>\r\n                </Toast.Body>\r\n                <Toast.Body><strong>Editor Height</strong>\r\n                    <ButtonGroup>\r\n                        <Button onClick={() => this.change_editor_height(\"-\")}><strong>-</strong></Button>\r\n                        <Button onClick={() => this.change_editor_height(\"+\")}><strong>+</strong></Button>\r\n                    </ButtonGroup>\r\n                </Toast.Body>\r\n                <Toast.Body><strong>Editor Font size</strong>\r\n                    <ButtonGroup>\r\n                        <Button onClick={() => this.change_editor_font(\"-\")}><strong>-</strong></Button>\r\n                        <Button onClick={() => this.change_editor_font(\"+\")}><strong>+</strong></Button>\r\n                    </ButtonGroup>\r\n                </Toast.Body>\r\n                <Toast.Body><strong>Editor Theme</strong>\r\n                    <ButtonGroup>\r\n                        <Button onClick={() => this.change_editor_theme(\"<\")}><strong>{\"<\"}</strong></Button>\r\n                        <Button onClick={() => this.change_editor_theme(\">\")}><strong>{\">\"}</strong></Button>\r\n                    </ButtonGroup>\r\n                </Toast.Body>\r\n            </Toast.Body>\r\n        </Toast>;\r\n\r\n        const preview_box = <MDBCard style={{ width: \"100%\", height: \"100%\" }}>\r\n            <MDBCardBody className=\"preview-box\">\r\n                <MDBCardTitle>HTML + CSS Preview</MDBCardTitle>\r\n                <Button onClick={this.toggle_full_preview} variant=\"success\" size=\"sm\">Full Preview</Button>\r\n                <iframe className=\"preview-frame\" src={preview} title=\"preview\" />\r\n            </MDBCardBody>\r\n        </MDBCard>;\r\n\r\n        const editor = <React.Fragment>\r\n            <MDBRow className=\"height-100\">\r\n                {showing_full_preview\r\n                    ?\r\n                    null\r\n                    :\r\n                    <MDBCol size={this.state.editor_settings.col_size}>\r\n                        <div className=\"ace-container\">\r\n                            <h1>HTML</h1>\r\n                            <Button onClick={this.generate_test_html}>Generate test HTML</Button>\r\n                            <AceEditor\r\n                                value={this.state.html}\r\n                                mode=\"html\"\r\n                                theme={current_theme}\r\n                                onChange={(val) => this.setState({ html: val })}\r\n                                name=\"html-editor\"\r\n                                showLineNumbers={true}\r\n                                width=\"100%\"\r\n                                height={editor_settings.height + \"vh\"}\r\n                                fontSize={editor_settings.font_size}\r\n                                editorProps={{\r\n                                    $blockScrolling: true\r\n                                }}\r\n                            />\r\n                            <h1>CSS</h1>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    this.generate_css();\r\n                                    window.scrollTo(0, 0);\r\n                                }}\r\n                                size=\"sm\"\r\n                            >\r\n                                Generate CSS with GPT-2\r\n                            </Button>\r\n                            <AceEditor\r\n                                value={this.state.css}\r\n                                mode=\"css\"\r\n                                theme={current_theme}\r\n                                onChange={(val) => this.setState({ css: val })}\r\n                                name=\"css-editor\"\r\n                                showLineNumbers={true}\r\n                                width={editor_settings.width + \"%\"}\r\n                                height={editor_settings.height + \"vh\"}\r\n                                fontSize={editor_settings.font_size}\r\n                                editorProps={{\r\n                                    $blockScrolling: true\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </MDBCol>\r\n                }\r\n                <MDBCol size={\r\n                    showing_full_preview ?\r\n                        12\r\n                        :\r\n                        12 - this.state.editor_settings.col_size\r\n                }>\r\n                    {preview_box}\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </React.Fragment>;\r\n\r\n\r\n        const toolbar =\r\n            <React.Fragment>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"info\" size=\"sm\">\r\n                        CSS samples to choose from, currently {sample_count}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.update_css_count(1)}>1 sample for each element</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => this.update_css_count(2)}>2 samples for each element</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => this.update_css_count(3)}>3 samples for each element</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <Button onClick={this.toggle_settings} variant={showing_settings ? \"danger\" : \"secondary\"}>\r\n                    {showing_settings ? \"Hide settings\" : \"Main settings\"}\r\n                </Button>\r\n                {generated_css.length > 0\r\n                    ? <Button onClick={this.toggle_css_options} variant={showing_css_options ? \"danger\" : \"success\"}>\r\n                        {showing_css_options ? \"Hide generated options\" : \"Show generated options\"}\r\n                    </Button>\r\n                    : null}\r\n                {settings}\r\n            </React.Fragment>;\r\n\r\n        return (\r\n            <MDBContainer fluid className=\"editor-container\">\r\n                {toolbar}\r\n                <Toast show={showing_connection_problem} onClose={() => this.setState({ showing_connection_problem: false })}>\r\n                    <ToastHeader style={{ color: 'red' }}>Failed to connect to server.. please use with test HTML</ToastHeader>\r\n                    <ToastBody>\r\n                        \r\n                        <Button\r\n                            onClick={() => {\r\n                                this.generate_test_css();\r\n                                this.setState({showing_connection_problem: false, generated_css: []});\r\n                            }}\r\n                            variant=\"warning\">Generate Test CSS without GPT-2\r\n                            </Button>\r\n                    </ToastBody>\r\n                </Toast>\r\n                {showing_css_options\r\n                    ?\r\n                    <React.Fragment>\r\n                        <Toast show={showing_options_warning} onClose={this.toggle_warning_message}>\r\n                            <Toast.Header style={{ color: 'red' }}>Choosing a new option will overwrite any changes made in the CSS editor!</Toast.Header>\r\n                        </Toast>\r\n                        <MDBContainer>\r\n                            <MDBCardTitle>Click on any styling to apply it</MDBCardTitle>\r\n                            {css_cards}\r\n                        </MDBContainer>\r\n                    </React.Fragment>\r\n                    : null\r\n                }\r\n                {waiting_for_api\r\n                    ?\r\n                    <React.Fragment>\r\n                        <Loader type=\"ThreeDots\" color=\"green\" />\r\n                        <h1>Takes about 20 seconds per sample generation... 5 for test</h1>\r\n                        <h2>\r\n                            <Timer>\r\n                                {\"You've been waiting for \"} <Timer.Minutes />{\" min and \"}<Timer.Seconds />{\" sec\"}\r\n                            </Timer>\r\n                        </h2>\r\n                    </React.Fragment>\r\n                    : null\r\n                }\r\n                {editor}\r\n            </MDBContainer>\r\n        );\r\n    }\r\n}\r\nexport default Editor;","import React from 'react';\r\nimport './App.css';\r\nimport Editor from  './Components/Editor/Editor';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Editor />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}